#!/usr/bin/python
# -*- coding: iso-8859-1 -*-
"""
   Copyright (C) 2010 Jef Oliver jgoliver _at_ jeago _dot_ com

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

         http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
"""

"""imports"""
import sys, os, shutil, subprocess, shlex, ConfigParser, re
from distutils import dir_util

"""Lets see what we are running on so we can write correct paths.  Don't want
   Windows to freak out over a "/", hehehe"""
if os.name == "nt":
  apktool="apktool.bat"
  smali="smali.bat"
  baksmali="baksmali.bat"
  autosign="autosign.bat"
else:
  apktool="apktool"
  smali="smali"
  baksmali="baksmali"
  autosign="autosign"

"""Check if we are in the base kitchen directory.  If we aren't, we will
   exit the program."""
if os.path.exists(os.path.join(os.getcwd(), "brokeout")) == False:
  print "\nPlease run build_theme from the root of the kitchen directory.\n"
  sys.exit()

"""Set our base directory variable for usage through the rest of the
   program"""
kitchenpath=os.getcwd()
import __builtin__
__builtin__.kitchenpath=kitchenpath
sys.path.append(os.path.join(kitchenpath, "include"))
import kitfuns

"""Read in our config file"""
config= ConfigParser.ConfigParser()
config.optionxform=str
config.read(os.path.join(kitchenpath, "conf", "kitchen.ini"))
if config.get("ireadthis", "isuredid") != "y":
  print"\nPlease read the HOWTO file and try again.\n"
  sys.exit()

"""**************************************************************************"""
"""function for copying edited images into the default tree of an apk"""
"""**************************************************************************"""
def eimgcopy( srcdir, destdir):
  dirchk=['drawable', 'drawable-finger', 'drawable-hdpi', 'drawable-hdpi-finger',
          'drawable-land-hdpi', 'drawable-land-hdpi-finger']
  for dirtochk in dirchk:
    if os.path.exists(os.path.join(srcdir, dirtochk)):
      srcdirn=os.path.join(srcdir, dirtochk)
      destdirn=os.path.join(destdir, dirtochk)
      if dir_util.copy_tree(srcdirn, destdirn, preserve_mode=1) == False:
	kitfuns.erroroutput("Could not copy image files.  Unknown Error")
	sys.exit()
  return

"""**************************************************************************"""
"""print a blank line to allow for nice clean formatting of output
   just because I am a stickler for output formatting"""
"""**************************************************************************"""
print ""

"""**************************************************************************"""
"""We'll start by extracting the default rom"""
"""**************************************************************************"""
kitfuns.verboseoutput("Extracting Original CyanogenMod Rom")
if os.path.exists(os.path.join(kitchenpath, "rom_orig")) == False:
  kitfuns.erroroutput("Please read the HOWTO file and try again.")
  sys.exit()
os.chdir(os.path.join(kitchenpath, "rom_orig"))
cmversion=config.get("general", "cmversion")
cmphone=config.get("general", "phone")
cmromdir="update-cm-"+cmversion+"-"+cmphone+"-signed"
cmromfile=cmromdir+".zip"
if os.path.exists(os.path.join(kitchenpath, "rom_orig", cmromfile)) == False:
  kitfuns.erroroutput("Please read the HOWTO file and try again.")
  sys.exit()
if os.path.exists(cmromdir) == True:
  kitfuns.verboseoutput("Original Rom extraction directory found.  Attempting to delete.")
  if shutil.rmtree(cmromdir) == False:
    kitfuns.erroroutput("Original Rom extraction directory already exists")
    kitfuns.erroroutput("Please delete "+os.path.join("rom_orig", cmromdir))
    sys.exit()
os.mkdir(cmromdir, 0755)
zargs=shlex.split("unzip -qq "+cmromfile+" -d "+cmromdir)
if subprocess.Popen(zargs).wait() != 0:
  kitfuns.erroroutput("Could not extract default cyanogenmod rom.  Unknown Error")
  sys.exit()
os.chdir(cmromdir)
cmromexpath=os.getcwd()
os.chdir(kitchenpath)
kitfuns.verboseoutput("Original CyanogenMod Rom Extracted")

"""**************************************************************************"""
"""Place apk and jar files into the correct directories"""
"""**************************************************************************"""
kitfuns.verboseoutput("Moving /system/app APKs Into Editing Directories")
if os.path.exists(os.path.join(kitchenpath, "brokeout", "app")) == False:
  kitfuns.erroroutput("app directory inside of brokeout is missing")
  kitfuns.erroroutput("      Please make sure the kitchen is complete")
  sys.exit()
apppath=os.path.join(kitchenpath, "brokeout", "app")
apppathorig=os.path.join(cmromexpath, "system", "app")
for apkf in config.options("includeapp"):
  if config.get("includeapp", apkf) == "y":
    apkpath=os.path.join(apppath, apkf)
    if os.path.exists(apkpath) == False:
      kitfuns.erroroutput("app directory for "+apkf+" is missing")
      kitfuns.erroroutput("      Please make sure the kitchen is complete")
      sys.exit()
    else:
      apkforig=os.path.join(apppathorig, apkf+".apk")
      apkfnew=os.path.join(apkpath, apkf+".apk")
      if shutil.move(apkforig, apkfnew) == False:
	kitfuns.erroroutput("Could not move "+apkf)
	sys.exit()

kitfuns.verboseoutput("Moving /system/framework JARs Into Editing Directories")
if os.path.exists(os.path.join(kitchenpath, "brokeout", "framework")) == False:
  kitfuns.erroroutput("framework directory inside of brokeout is missing")
  kitfuns.erroroutput("      Please make sure the kitchen is complete")
  sys.exit()
jarpath=os.path.join(kitchenpath, "brokeout", "framework")
jarpathorig=os.path.join(cmromexpath, "system", "framework")
for jarf in config.options("includefw"):
  if config.get("includefw", jarf) == "y":
    jarfpath=os.path.join(jarpath, jarf)
    if os.path.exists(jarfpath) == False:
      kitfuns.erroroutput("jar direcotry for "+jarf+" is missing")
      kitfuns.erroroutput("      Please make sure the kitchen is complete")
      sys.exit()
    else:
      jarforig=os.path.join(jarpathorig, jarf+".jar")
      jarfnew=os.path.join(jarfpath, jarf+".jar")
      if shutil.move(jarforig, jarfnew) == False:
	kitfuns.erroroutput("Error: Could not move "+jarf)
	sys.exit()

kitfuns.verboseoutput("Moving framework-res.apk Into Editing Directory")
fwapko=os.path.join(cmromexpath, "system", "framework", "framework-res.apk")
fwapkp=os.path.join(kitchenpath, "brokeout", "framework", "framework-res")
fwapkn=os.path.join(fwapkp, "framework-res.apk")
if os.path.exists(fwapkp) == False:
  kitfuns.erroroutput("framework-res directory in brokeout does not exist")
  kitfuns.erroroutput("      Please make sure the kitchen is complete")
  sys.exit()
else:
  if shutil.move(fwapko, fwapkn) == False:
    kitfuns.erroroutput("Could not move framework-res.apk")
    sys.exit()

"""**************************************************************************"""
"""Cleanup the extraction directory of the original rom"""
"""**************************************************************************"""
kitfuns.verboseoutput("Cleaning Up Extraction Directory")
os.chdir(os.path.join(kitchenpath, "rom_orig"))
if shutil.rmtree(cmromdir) == False:
  kitfuns.erroroutput("Could Not Delete Original Rom Extraction Directory")
  sys.exit()
os.chdir(kitchenpath)

"""**************************************************************************"""
"""Build output directory"""
"""**************************************************************************"""
kitfuns.verboseoutput("Preparing Output Tree")
if os.path.exists("rom_newstruct") == False:
  kitfuns.erroroutput("rom_newstruct directory does not exist")
  kitfuns.erroroutput("      Please make sure the kitchen is complete")
  sys.exit()
os.chdir("rom_newstruct")
if os.path.exists(os.path.join("META-INF", "com", "google", "android", "update-script")) == False:
  kitfuns.erroroutput("update-script does not exist")
  kitfuns.erroroutput("      Please make sure the kitchen is complete")
  sys.exit()
if os.path.exists("remtool.sh") == False:
  kitfuns.erroroutput("remtool.sh does not exist")
  kitfuns.erroroutput("      Please make sure the kitchen is complete")
  sys.exit()
if os.path.exists("system") == True:
  shutil.rmtree("system")
os.mkdir("system", 0755)
os.chdir("system")
os.mkdir("app", 0755)
os.mkdir("framework", 0755)
os.chdir(kitchenpath)
outfwpath=os.path.join(kitchenpath, "rom_newstruct", "system", "framework")
outapppath=os.path.join(kitchenpath, "rom_newstruct", "system", "app")

"""**************************************************************************"""
"""Theme and edit framework-res.apk"""
"""**************************************************************************"""
kitfuns.verboseoutput("Theming and Editing framework-res.apk")
os.chdir(fwapkp)
kitfuns.pverboseoutput("Extracting framework-res.apk")
if config.get("whitetext", "theme") == "y":
  needapktool="y"
if config.get("progressbar", "theme") == "y":
  needapktool="y"
zargs=shlex.split("unzip -qq framework-res.apk -d framework-res")
if subprocess.Popen(zargs).wait() != 0:
  kitfuns.erroroutput("Could Not Extract framework-res.apk")
  sys.exit()
kitfuns.pverboseoutput("Copying Edited Images Into framework-res Tree")
newimages=os.path.join(fwapkp, "image")
origimages=os.path.join(fwapkp, "framework-res", "res")
eimgcopy(newimages, origimages)
if needapktool == "y":
  kitfuns.pverboseoutput("Running apktool on framework-res.apk")
  zargs=shlex.split(apktool+" d -s framework-res.apk toold")
  if subprocess.Popen(zargs, stdout=subprocess.PIPE, stderr=subprocess.PIPE).wait() != 0:
    kitfuns.erroroutput("Could Not apktool framework-res.apk")
    sys.exit()
  if config.get("whitetext", "theme") == "y":
    kitfuns.pverboseoutput("Patching Framework For White Text")
    os.chdir(os.path.join("toold", "res", "layout"))
    kitfuns.fstrrep("status_bar_expanded.xml", "ff000000", "ffffffff")
    kitfuns.fstrrep("status_bar_latest_event_content.xml", "ff000000", "ffffffff")
    kitfuns.fstrrep("status_bar.xml", "ff000000", "ffffffff")
    os.chdir(fwapkp)
  if config.get("progressbar", "theme") == "y":
    kitfuns.pverboseoutput("Patching Progressbars in Framework")
    os.chdir(os.path.join("toold", "res", "drawable"))
    kitfuns.fstrrep("progress_horizontal.xml", "9d9e9d", config.get("progressbar", "bgstartcol"))
    kitfuns.fstrrep("progress_horizontal.xml", "5a5d5a", config.get("progressbar", "bgcentercol"))
    kitfuns.fstrrep("progress_horizontal.xml", "747674", config.get("progressbar", "bgendcol"))
    kitfuns.fstrrep("progress_horizontal.xml", "ffd300", config.get("progressbar", "secstartcol"))
    kitfuns.fstrrep("progress_horizontal.xml", "ffb600", config.get("progressbar", "seccentercol"))
    kitfuns.fstrrep("progress_horizontal.xml", "ffcb00", config.get("progressbar", "secendcol"))
    kitfuns.fstrrep("progress_horizontal.xml", "ffd300", config.get("progressbar", "mainstartcol"))
    kitfuns.fstrrep("progress_horizontal.xml", "ffb600", config.get("progressbar", "maincentercol"))
    kitfuns.fstrrep("progress_horizontal.xml", "ffcb00", config.get("progressbar", "mainendcol"))
  os.chdir(fwapkp)
  kitfuns.pverboseoutput("Rebuilding With apktool")
  zargs=shlex.split(apktool+" b toold")
  if subprocess.Popen(zargs, stdout=subprocess.PIPE, stderr=subprocess.PIPE).wait() != 0:
    kitfuns.erroroutput("Could Not apktool Rebuild framework-res.apk")
    sys.exit()
  os.chdir(os.path.join("toold", "dist"))
  shutil.move("out.apk", os.path.join(fwapkp, "out.apk"))
  os.chdir(fwapkp)
  kitfuns.pverboseoutput("Integrating Edited XML Files")
  shutil.rmtree("toold")
  zargs=shlex.split("unzip -qq out.apk -d toold")
  if subprocess.Popen(zargs, stdout=subprocess.PIPE, stderr=subprocess.PIPE).wait() != 0:
    kitfuns.erroroutput("Could Not Unzip out.apk")
    sys.exit()
  if config.get("whitetext", "theme") == "y":
    os.chdir(os.path.join("toold", "res", "layout"))
    shutil.copy("status_bar_expanded.xml", os.path.join(fwapkp, "framework-res", "res", "layout", "status_bar_expanded.xml"))
    shutil.copy("status_bar_latest_event_content.xml", os.path.join(fwapkp, "framework-res", "res", "layout", "status_bar_latest_event_content.xml"))
    shutil.copy("status_bar.xml", os.path.join(fwapkp, "framework-res", "res", "layout", "status_bar.xml"))
    os.chdir(fwapkp)
  if config.get("progressbar", "theme") == "y":
    os.chdir(os.path.join("toold", "res", "drawable"))
    shutil.copy("progress_horizontal.xml", os.path.join(fwapkp, "framework-res", "res", "drawable", "progress_horizontal.xml"))
    os.chdir(fwapkp)
  os.remove("out.apk")
  shutil.rmtree("toold")
kitfuns.pverboseoutput("Recompressing framework-res.apk")
os.remove("framework-res.apk")
os.chdir("framework-res")
shutil.rmtree("META-INF")
zargs=shlex.split("zip -q framework-res.apk -r .")
if subprocess.Popen(zargs).wait() != 0:
  kitfuns.erroroutput("Could Not Recompress framework-res.apk")
  sys.exit()
kitfuns.pverboseoutput("Signing framework-res.apk")
zargs=shlex.split(autosign+" framework-res.apk new.framework-res.apk")
if subprocess.Popen(zargs).wait() != 0:
  kitfuns.erroroutput("Could Not Sign framework-res.apk")
  sys.exit()
kitfuns.pverboseoutput("Zipaligning framework-res.apk")
os.remove("framework-res.apk")
zargs=shlex.split("zipalign 4 new.framework-res.apk framework-res.apk")
if subprocess.Popen(zargs).wait() != 0:
  kitfuns.erroroutput("Could Not Zipalign framework-res.apk")
  sys.exit()
kitfuns.pverboseoutput("Cleaning Up framework-res Edit Tree")
shutil.move("framework-res.apk", os.path.join(outfwpath, "framework-res.apk"))
os.chdir(fwapkp)
shutil.rmtree("framework-res")
kitfuns.verboseoutput("Done Theming and Editing framework-res.apk")
os.chdir(kitchenpath)

"""**************************************************************************"""
"""Editing services.jar"""
"""**************************************************************************"""
if config.get("whitetext", "theme") == "y":
  kitfuns.verboseoutput("Patching services.jar")
  os.chdir(os.path.join("brokeout", "framework", "services"))
  kitfuns.pverboseoutput("Unzipping services.jar")
  zargs=shlex.split("unzip -qq services.jar -d services")
  if subprocess.Popen(zargs, stdout=subprocess.PIPE, stderr=subprocess.PIPE).wait() != 0:
    kitfuns.erroroutput("Could Not Unzip services.jar")
    sys.exit()
  os.remove("services.jar")
  kitfuns.pverboseoutput("baksmali services.jar")
  os.chdir("services")
  zargs=shlex.split(baksmali+" -o classout classes.dex")
  if subprocess.Popen(zargs, stdout=subprocess.PIPE, stderr=subprocess.PIPE).wait() != 0:
    kitfuns.erroroutput("Could Not baksmali services.jar")
    sys.exit()
  kitfuns.pverboseoutput("Patch StatusBarIcon")
  zargs=shlex.split("patch -p0 -i ../StatusBarIcon_white_text.diff")
  if subprocess.Popen(zargs, stdout=subprocess.PIPE, stderr=subprocess.PIPE).wait() != 0:
    kitfuns.erroroutput("Could Not Apply Patch StatusBarIcon_white_text.diff")
    sys.exit()
  kitfuns.pverboseoutput("Patch StatusBarService")
  zargs=shlex.split("patch -p0 -i ../StatusBarService_white_text.diff")
  if subprocess.Popen(zargs, stdout=subprocess.PIPE, stderr=subprocess.PIPE).wait() != 0:
    kitfuns.erroroutput("Could Not Apply Patch StatusBarService_white_text.diff")
    sys.exit()
  kitfuns.pverboseoutput("smali services.jar")
  os.remove("classes.dex")
  zargs=shlex.split(smali+" classout -o classes.dex")
  if subprocess.Popen(zargs, stdout=subprocess.PIPE, stderr=subprocess.PIPE).wait() != 0:
    kitfuns.erroroutput("Could Not smali services.jar")
    sys.exit()
  shutil.rmtree("classout")
  kitfuns.pverboseoutput("Recompressing services.jar")
  zargs=shlex.split("zip -9 services.jar -r .")
  if subprocess.Popen(zargs, stdout=subprocess.PIPE, stderr=subprocess.PIPE).wait() != 0:
    kitfuns.erroroutput("Could Not Recompress services.jar")
    sys.exit()
  kitfuns.pverboseoutput("Zipaligning services.jar")
  zargs=shlex.split("zipalign 4 services.jar new.services.jar")
  if subprocess.Popen(zargs, stdout=subprocess.PIPE, stderr=subprocess.PIPE).wait() != 0:
    kitfuns.erroroutput("Could Not Zipalign services.jar")
    sys.exit()
  os.remove("services.jar")
  shutil.move("new.services.jar", os.path.join(outfwpath, "services.jar"))
  kitfuns.pverboseoutput("Cleaning Up")
  os.chdir("..")
  shutil.rmtree("services")
  kitfuns.verboseoutput("Patched services.jar")
"""**************************************************************************"""
"""theme the apps we want themed"""
"""**************************************************************************"""
kitfuns.verboseoutput("Theming APKs")
for apkf in sorted(config.options("includeapp")):
  if config.get("includeapp", apkf) == "y":
    kitfuns.pverboseoutput("Themeing "+apkf)
    apkpath=os.path.join(apppath, apkf)
    os.chdir(apkpath)
    if os.path.exists(apkf) == True:
      shutil.rmtree(apkf)
    zargs=shlex.split("unzip -qq "+apkf+".apk -d "+apkf)
    if subprocess.Popen(zargs).wait() != 0:
      kitfuns.erroroutput("Could Not Extract "+apkf+".apk")
      sys.exit()
    kitfuns.pverboseoutput("Copying Edited Images Into "+apkf+" Tree")
    newimages=os.path.join(apkpath, "image")
    origimages=os.path.join(apkpath, apkf, "res")
    eimgcopy(newimages, origimages)
    kitfuns.pverboseoutput("Cleaning Edit Tree: "+apkf)
    os.chdir(apkf)
    shutil.rmtree("META-INF")
    os.chdir(apkpath)
    if config.has_section(apkf) == True:
      if config.get(apkf, "extra") == "y":
        importname="kitchen_"+apkf
        tmpmod=__import__(importname)
        kitfuns.pverboseoutput("Running Custom Commands for "+apkf)
        tmpmod.custom_commands_run(apkf, apkpath, kitchenpath, apktool, smali, baksmali)
    os.chdir(apkpath)
    os.remove(apkf+".apk")
    os.chdir(os.path.join(apkpath, apkf))
    kitfuns.pverboseoutput("Recompressing "+apkf+".apk")
    zargs=shlex.split("zip -q9 "+apkf+".apk -r .")
    if subprocess.Popen(zargs).wait() != 0:
      kitfuns.erroroutput("Could Not Recompress "+apkf+".apk")
      sys.exit()
    kitfuns.pverboseoutput("Signing "+apkf+".apk")
    zargs=shlex.split(autosign+" "+apkf+".apk new."+apkf+".apk")
    if subprocess.Popen(zargs, stdout=subprocess.PIPE, stderr=subprocess.PIPE).wait() != 0:
      kitfuns.erroroutput("Could Not Sign "+apkf+".apk")
      sys.exit()
    kitfuns.pverboseoutput("Zipaligning "+apkf+".apk")
    os.remove(apkf+".apk")
    zargs=shlex.split("zipalign 4 new."+apkf+".apk "+apkf+".apk")
    if subprocess.Popen(zargs, stdout=subprocess.PIPE, stderr=subprocess.PIPE).wait() != 0:
      kitfuns.erroroutput("Could Not Zipalign "+apkf+".apk")
      sys.exit()
    os.remove("new."+apkf+".apk")
    kitfuns.pverboseoutput("Cleaning Up "+apkf+" Edit Tree")
    shutil.move(apkf+".apk", os.path.join(outapppath, apkf+".apk"))
    os.chdir(apkpath)
    shutil.rmtree(apkf)
    kitfuns.pverboseoutput("Themeing "+apkf+" Done")
    kitfuns.pverboseoutput("************************************************************ **")
os.chdir(kitchenpath)
kitfuns.verboseoutput("Theming APKs Done")
kitfuns.verboseoutput("Building Theme Zip")
if os.path.exists("final") == False:
  os.mkdir("final", 0755)
os.chdir("rom_newstruct")
zargs=shlex.split("zip -q0 update.zip -r .")
if subprocess.Popen(zargs).wait() != 0:
  kitfuns.erroroutput("Could Not Build Theme Zip")
  sys.exit()
shutil.move("update.zip", os.path.join(kitchenpath, "final", "update.zip"))
os.chdir(os.path.join(kitchenpath, "final"))
kitfuns.verboseoutput("Signing Theme Zip")
zargs=shlex.split(autosign+" update.zip new.update.zip")
if subprocess.Popen(zargs, stdout=subprocess.PIPE, stderr=subprocess.PIPE).wait() != 0:
  kitfuns.erroroutput("Could Not Sign Theme Zip")
  sys.exit()
os.remove("update.zip")
os.rename("new.update.zip", "update.zip")
kitfuns.verboseoutput("Cleaning Rom Structure Directory")
os.chdir(os.path.join(kitchenpath, "rom_newstruct"))
shutil.rmtree("system")
kitfuns.formoutput(config.get("general", "themename")+" "+config.get("general", "themeversion")+": Build Complete")
kitfuns.formoutput("The signed update.zip is in the final directory")
kitfuns.formoutput("Be sure to rename this file according to your needs")
print ""